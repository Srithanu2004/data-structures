#include <stdio.h>
#include <limits.h>
#define MAX 100
#define INF INT_MAX
int minKey(int key[], int included[], int n) {
    int min = INF, minIndex;

    for (int v = 0; v < n; v++) {
        if (!included[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}
void primMST(int graph[MAX][MAX], int n) {
    int parent[MAX];  
    int key[MAX];     
    int included[MAX]; 
    for (int i = 0; i < n; i++) {
        key[i] = INF;
        included[i] = 0;
    }
    key[0] = 0;
    parent[0] = -1; // The first node is always the root of MST
    for (int count = 0; count < n - 1; count++) {
        int u = minKey(key, included, n);
        included[u] = 1;
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !included[v] && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int n;
    int graph[MAX][MAX];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (enter 0 if there is no edge between vertices):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Minimum Spanning Tree (MST):\n");
    primMST(graph, n);

    return 0;
}
